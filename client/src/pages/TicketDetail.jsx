import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import http from '../api/http';

export default function TicketDetail(){
  const { id } = useParams();
  const [t, setT] = useState(null);
  const [logs, setLogs] = useState([]);
  const [me,setMe]=useState({ role:'user' });
  const [reply,setReply]=useState('');
  const [suggestion, setSuggestion] = useState(null);
  const [loadingSuggestion, setLoadingSuggestion] = useState(false);
  const [replies, setReplies] = useState([]);
  const [sendingReply, setSendingReply] = useState(false);

  async function load(){
    const { data } = await http.get(`/tickets/${id}`);
    setT(data.data);
    const a = await http.get(`/tickets/${id}/audit`);
    setLogs(a.data.data);

    // Load replies
    const repliesRes = await http.get(`/tickets/${id}/replies`);
    setReplies(repliesRes.data.data);

    try{ const meDec = JSON.parse(atob(localStorage.getItem('token').split('.')[1])); setMe(meDec); }catch{}

    // Load agent suggestion if user is agent/admin and ticket has suggestion
    if (data.data.agentSuggestionId && (meDec?.role === 'agent' || meDec?.role === 'admin')) {
      setLoadingSuggestion(true);
      try {
        const suggestionRes = await http.get(`/agent/suggestion/${id}`);
        setSuggestion(suggestionRes.data.data);
        // Pre-fill reply with draft if not already filled
        if (!reply && suggestionRes.data.data.draftReply) {
          setReply(suggestionRes.data.data.draftReply);
        }
      } catch (err) {
        console.error('Failed to load suggestion:', err);
      } finally {
        setLoadingSuggestion(false);
      }
    }
  }
  useEffect(()=>{ load(); },[id]);

  async function sendReply(){
    if (!reply.trim()) return;
    setSendingReply(true);
    try {
      await http.post(`/tickets/${id}/replies`, { body: reply });
      setReply('');
      await load();
    } catch (err) {
      console.error('Failed to send reply:', err);
      alert('Failed to send reply. Please try again.');
    } finally {
      setSendingReply(false);
    }
  }

  if (!t) return (
    <div className="flex items-center justify-center h-64">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
    </div>
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">{t.title}</h1>
            <p className="text-gray-600 mb-4">{t.description}</p>
            <div className="flex items-center space-x-4">
              <span className={`badge ${
                t.status === 'open' ? 'badge-primary' :
                t.status === 'waiting_human' ? 'badge-warning' :
                t.status === 'resolved' ? 'badge-success' : 'badge-gray'
              }`}>
                {t.status.replace('_', ' ')}
              </span>
              <span className="badge badge-gray">
                {t.category === 'billing' ? 'üí≥' :
                 t.category === 'tech' ? 'üîß' :
                 t.category === 'shipping' ? 'üì¶' : '‚ùì'} {t.category}
              </span>
              <span className="text-sm text-gray-500">
                Created {new Date(t.createdAt).toLocaleDateString()}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Conversation Thread */}
      {replies.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900 flex items-center">
              üí¨ Conversation
            </h3>
          </div>
          <div className="max-h-96 overflow-y-auto">
            {replies.map(r => (
              <div key={r._id} className={`p-4 border-b border-gray-100 last:border-b-0 ${
                r.authorType === 'system' ? 'bg-blue-50' : 'bg-white'
              }`}>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    {r.authorType === 'system' ? (
                      <span className="text-blue-600 font-medium">
                        ü§ñ AI Assistant {r.isAutoGenerated && '(Auto-generated)'}
                      </span>
                    ) : (
                      <span className="text-gray-900 font-medium">
                        üë§ {r.author?.name || 'Agent'} ({r.authorType})
                      </span>
                    )}
                  </div>
                  <span className="text-xs text-gray-500">
                    {new Date(r.createdAt).toLocaleString()}
                  </span>
                </div>
                <div className="text-gray-700 whitespace-pre-wrap">{r.body}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Agent Suggestion Display */}
      {suggestion && me.role !== 'user' && (
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            ü§ñ AI Agent Suggestion
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="text-sm text-gray-500 mb-1">Predicted Category</div>
              <div className="font-medium text-gray-900 capitalize">{suggestion.predictedCategory}</div>
            </div>
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="text-sm text-gray-500 mb-1">Confidence Score</div>
              <div className="font-medium text-gray-900">{(suggestion.confidence * 100).toFixed(1)}%</div>
            </div>
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="text-sm text-gray-500 mb-1">Status</div>
              {suggestion.autoClosed ? (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  ‚úì Auto-Closed
                </span>
              ) : (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                  Awaiting Review
                </span>
              )}
            </div>
          </div>

          {suggestion.articleIds && suggestion.articleIds.length > 0 && (
            <div className="mb-6">
              <h4 className="font-medium text-gray-900 mb-3">Referenced KB Articles:</h4>
              <div className="space-y-2">
                {suggestion.articleIds.map(article => (
                  <div key={article._id} className="bg-white rounded-md p-3 border border-gray-200">
                    <div className="font-medium text-sm text-gray-900">{article.title}</div>
                    {article.tags && article.tags.length > 0 && (
                      <div className="mt-1 flex flex-wrap gap-1">
                        {article.tags.map(tag => (
                          <span key={tag} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="mb-4">
            <h4 className="font-medium text-gray-900 mb-2">AI Draft Reply:</h4>
            <div className="bg-white border border-gray-300 rounded-md p-4">
              <div className="text-sm text-gray-700 whitespace-pre-wrap">
                {suggestion.draftReply}
              </div>
            </div>
          </div>

          <div className="text-xs text-gray-500 flex items-center justify-between">
            <span>Generated by {suggestion.modelInfo?.provider}</span>
            <span>Response time: {suggestion.modelInfo?.latencyMs}ms</span>
          </div>
        </div>
      )}

      {loadingSuggestion && me.role !== 'user' && (
        <div className="bg-white border border-gray-200 rounded-lg p-6 text-center">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600 mx-auto mb-2"></div>
          <div className="text-sm text-gray-600">Loading AI suggestion...</div>
        </div>
      )}

      {me.role !== 'user' && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Agent Reply</h3>
          <div className="space-y-4">
            <div>
              <label className="label">Your Response</label>
              <textarea
                value={reply}
                onChange={e => setReply(e.target.value)}
                placeholder="Type your reply to the customer..."
                className="input resize-none"
                rows={4}
              />
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={sendReply}
                disabled={sendingReply || !reply.trim()}
                className="btn-primary"
              >
                {sendingReply ? (
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Sending...
                  </div>
                ) : (
                  'Send & Resolve'
                )}
              </button>
              {suggestion && (
                <button
                  onClick={() => setReply(suggestion.draftReply)}
                  className="btn-secondary"
                >
                  Use AI Draft
                </button>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Audit Timeline */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">Audit Timeline</h3>
        </div>
        <div className="p-6">
          {logs.length === 0 ? (
            <p className="text-gray-500 text-center py-4">No audit logs available</p>
          ) : (
            <div className="space-y-3">
              {logs.map(l => (
                <div key={l._id} className="flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0">
                  <div className="flex items-center space-x-3">
                    <div className="w-2 h-2 bg-primary-500 rounded-full"></div>
                    <div>
                      <div className="text-sm font-medium text-gray-900">
                        {l.action.replace(/_/g, ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}
                      </div>
                      <div className="text-xs text-gray-500">by {l.actor}</div>
                    </div>
                  </div>
                  <div className="text-xs text-gray-500">
                    {new Date(l.timestamp).toLocaleString()}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}