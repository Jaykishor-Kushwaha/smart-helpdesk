import { Router } from 'express';
import { requireAuth } from '../middlewares/auth.js';
import { requireRole } from '../middlewares/rbac.js';
import { validate } from '../middlewares/validate.js';
import { Reply } from '../models/Reply.js';
import { Ticket } from '../models/Ticket.js';
import { AuditLog } from '../models/AuditLog.js';
import { MongoIdParam, ReplySchema } from '../schemas/validation.js';
import { randomUUID } from 'crypto';

const router = Router();

// Get all replies for a ticket
router.get('/tickets/:id/replies', requireAuth, validate(MongoIdParam), async (req, res) => {
  const replies = await Reply.find({ ticketId: req.valid.params.id })
    .populate('author', 'name role')
    .sort({ createdAt: 1 })
    .lean();

  res.json({ ok: true, data: replies });
});

// Create a new reply (for agents)
router.post('/tickets/:id/replies', requireAuth, requireRole('agent', 'admin'), validate(ReplySchema), async (req, res) => {
  const { body, resolveTicket } = req.valid.body;

  const ticket = await Ticket.findById(req.valid.params.id);
  if (!ticket) {
    return res.status(404).json({ ok: false, error: { message: 'Ticket not found' } });
  }
  
  // Create the reply
  const reply = await Reply.create({
    ticketId: req.valid.params.id,
    author: req.user.sub,
    authorType: 'agent',
    body: body.trim(),
    isAutoGenerated: false
  });
  
  // Update ticket status
  if (resolveTicket) {
    ticket.status = 'resolved';
    await ticket.save();
  }
  
  // Log the action
  const traceId = randomUUID();
  await AuditLog.create({
    ticketId: req.valid.params.id,
    traceId,
    actor: 'agent',
    action: 'REPLY_SENT',
    meta: { replyId: reply._id, resolved: resolveTicket },
    timestamp: new Date()
  });
  
  const populatedReply = await Reply.findById(reply._id).populate('author', 'name role').lean();
  res.status(201).json({ ok: true, data: populatedReply });
});

export default router;
